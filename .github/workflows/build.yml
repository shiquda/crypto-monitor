name: Build and Release

on:
  push:
    tags:
      - "v*.*.*" # trigger when tag is vX.X.X
  workflow_dispatch:
    inputs:
      tag:
        description: "Tag to build and release"
        required: true
        default: "v0.0.0"

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            build-platform: linux/amd64
            build-name: crypto-monitor
          - os: macos-latest
            build-platform: darwin/universal
            build-name: crypto-monitor
          - os: windows-latest
            build-platform: windows/amd64
            installer-name: crypto-monitor-installer.exe
            executable-name: crypto-monitor-windows-amd64.exe

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Setup GoLang
        uses: actions/setup-go@v4
        with:
          go-version: "1.21"

      - name: Setup NodeJS
        uses: actions/setup-node@v3
        with:
          node-version: "18"

      - name: Install Linux Wails deps
        if: runner.os == 'Linux'
        run: sudo apt-get update && sudo apt-get install -y libgtk-3-0 libwebkit2gtk-4.0-dev gcc-aarch64-linux-gnu

      - name: Install Wails
        run: go install github.com/wailsapp/wails/v2/cmd/wails@latest

      - name: Install Go Dependencies
        run: go mod tidy

      - name: Install frontend dependencies
        run: |
          cd frontend
          npm install

      - name: Create build/bin directory
        if: runner.os == 'Windows'
        run: mkdir build\bin

      - name: Build Wails App (Non-Windows)
        if: runner.os != 'Windows'
        run: |
          wails build --platform ${{ matrix.build-platform }} -webview2 download -o build/bin/${{ matrix.build-name }}
        working-directory: ./ # 确保在仓库根目录

      - name: Build Windows Installer
        if: runner.os == 'Windows'
        run: |
          wails build --platform ${{ matrix.build-platform }} -webview2 download -nsis -o build/bin/${{ matrix.installer-name }}

      - name: Build Windows Executable
        if: runner.os == 'Windows'
        run: |
          wails build --platform ${{ matrix.build-platform }} -webview2 download -o build/bin/${{ matrix.executable-name }}

      - name: List Build Directory
        run: |
          echo "Listing build directory:"
          ls -al ./build/bin

      - name: Upload Build Artifact (Non-Windows)
        if: runner.os != 'Windows'
        uses: actions/upload-artifact@v3
        with:
          name: crypto-monitor-${{ matrix.os }}
          path: ./build/bin/${{ matrix.build-name }}

      - name: Upload Windows Installer Artifact
        if: runner.os == 'Windows'
        uses: actions/upload-artifact@v3
        with:
          name: crypto-monitor-windows-installer
          path: ./build/bin/${{ matrix.installer-name }}

      - name: Upload Windows Executable Artifact
        if: runner.os == 'Windows'
        uses: actions/upload-artifact@v3
        with:
          name: crypto-monitor-windows-executable
          path: ./build/bin/${{ matrix.executable-name }}

  release:
    runs-on: ubuntu-latest
    needs: build
    if: startsWith(github.ref, 'refs/tags/') || github.event_name == 'workflow_dispatch'

    steps:
      - name: Download Non-Windows Ubuntu Artifact
        uses: actions/download-artifact@v3
        with:
          name: crypto-monitor-ubuntu-latest
          path: ./artifacts/ubuntu-latest

      - name: Download Non-Windows macOS Artifact
        uses: actions/download-artifact@v3
        with:
          name: crypto-monitor-macos-latest
          path: ./artifacts/macos-latest

      - name: Download Windows Installer Artifact
        uses: actions/download-artifact@v3
        with:
          name: crypto-monitor-windows-installer
          path: ./artifacts/windows-installer

      - name: Download Windows Executable Artifact
        uses: actions/download-artifact@v3
        with:
          name: crypto-monitor-windows-executable
          path: ./artifacts/windows-executable

      - name: Get Version
        id: get_version
        run: |
          if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
            echo "VERSION=${{ github.event.inputs.tag }}" >> $GITHUB_ENV
          else
            VERSION=${GITHUB_REF/refs\/tags\//}
            echo "VERSION=${VERSION}" >> $GITHUB_ENV
        shell: bash

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ env.VERSION }}
          release_name: Release ${{ env.VERSION }}
          draft: false
          prerelease: false

      - name: Upload Windows Installer Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./artifacts/windows-installer/${{ matrix.installer-name }}
          asset_name: crypto-monitor-${{ env.VERSION }}-windows-amd64-installer.exe
          asset_content_type: application/vnd.microsoft.portable-executable

      - name: Upload Windows Executable Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./artifacts/windows-executable/${{ matrix.executable-name }}
          asset_name: crypto-monitor-${{ env.VERSION }}-windows-amd64.exe
          asset_content_type: application/vnd.microsoft.portable-executable

      - name: Upload macOS Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./artifacts/macos-latest/${{ matrix.build-name }}
          asset_name: crypto-monitor-${{ env.VERSION }}-macos-universal.app
          asset_content_type: application/x-apple-app

      - name: Upload Linux Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./artifacts/ubuntu-latest/${{ matrix.build-name }}
          asset_name: crypto-monitor-${{ env.VERSION }}-linux-amd64
          asset_content_type: application/x-elf

      - name: List Artifacts Directories
        run: |
          echo "Listing Windows Installer Directory:"
          ls -al ./artifacts/windows-installer/
          echo "Listing Windows Executable Directory:"
          ls -al ./artifacts/windows-executable/
